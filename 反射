package main

import (
"fmt"
"reflect"
)

type User struct {
ID int
Name string
Age int
}


func (u User) Hello(name string){
fmt.println("Hello",name,"my name is ",u.name)
}

fuc main(){
u := User{1,"ok",12}
v := reflect.ValueOf(u)
mv := v.MethodByName("Hello")

args := []reflect.Value{reflect.ValueOf("joe")}

mv.Call(args)

}

//带有参数的函数反射
package main

import (
	"fmt"
	"reflect"
)

var x float64 = 3.4

type Show struct {
	Name string
	Age  int
}

func main() {
	v := reflect.ValueOf(&x) //复制的时候，会创建一个副本，以后你操作的数据，都是操作副本
	fmt.Println(v.Type())
	fmt.Println(v.CanSet())
	fmt.Println(v.Kind())

	//创建当前的对象
	jk := Show{Name: "wenwen", Age: 28}
	//输出当前反射的元素数
	fnum := reflect.ValueOf(&jk).Elem()
	fmt.Println(fnum)
	typeT := fnum.Type()

	//便利输出当前的键值对的关联关系
	for i := 0; i < fnum.NumField(); i++ {
		f := fnum.Field(i)
		fmt.Println(typeT.Field(i).Name)
		fmt.Printf("dh %d", f.Interface()) //输出当前的内容的操作！
		fmt.Println(fnum.FieldByName("Age"))

	}

	//反射的方式电泳当前的函数
	reflect.ValueOf(&jk).MethodByName("S").Call([]reflect.Value{}) // 创建了没有参数的，反射函数的调用
	//fmt.Println(pp)
	//有参数的反射调用
	fmt.Println(reflect.Value{})
	//有参数的传递
	d := reflect.ValueOf(1)
	reflect.ValueOf(&jk).MethodByName("Bq").Call([]reflect.Value{d})

}

//反射函数的调用

func (a *Show) S() {
	fmt.Printf("This is Show struct of S func %s \n", a.Name)
}

//创建有参数的，函数调用的形式，返回参数的

func (b *Show) Bq(o int) {
	fmt.Printf("is this your umbrella! %s and the of it is %d", b.Name, o)
}


	method, hand_find := reflect.TypeOf(c).MethodByName("Fuck")
	//end switch
	if hand_find == false {

	}

	args_num := method.Type.NumIn()
	println("args_num", args_num)
	args := []reflect.Value{}

	if args_num > 1 {
		for i := 1; i < args_num; i++ {
			fmt.Printf("【参数】%v", method.Type.In(1).Elem().String())
			println("ender\n")
			switch method.Type.In(i).Kind() {

			case reflect.String:
				println("The best is strga")
				fk := reflect.ValueOf("mengll")
				args = append(args, fk)
			case reflect.Int:
				fkqa := reflect.ValueOf(22)
				args = append(args, fkqa)

			}
		}
	}
	
	Type 和 Kind Type 表示真实类型（静态类型）。Kind 表示其基础结构（底层类型）
	type X int  
	
	func main(){
	var a X = 100
	t := reflect.TypeOf(a)
	fmt.Println(t.Name(),t.Kind()) // X int
	}
	
	//main.go
	
	ReqDat struct {
		Cmd        string                 `json:"cmd"`
		Data       map[string]interface{} `json:"data"`
		MessageId  string                 `json:"message_id"`
		MessageKey string                 `json:"message_key"`
	}
	
	//方法Elem 返回指针，切片，数组，字典（值）或通道的基础类型
		jk := new(ReqDat)
		fmt.Println("底层类型：", reflect.TypeOf(jk).Elem()) //底层类型： main.ReqDat
	
	
