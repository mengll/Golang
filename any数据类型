由于GO语言中任何对象实例满足空接口的 interface{} 所以interface{} 可以表示任意的任何对象的数据类型

var v1 interface{} = 1 //将int 类型赋值给interface{} 
var v2 interface{} = "" //字符串赋值给和i任意的类型表示表示当前个ianderenyi

func printf(fmt string ,args ...interface{}) //表示的任意的数据类型


go 中的格式化
###格式化字符串的
fmt.Sprintf("文件中%s",file) 的方式格式化输出 字符串
###将go中的map的格式的转化成json数据格式
json.MarshalIndent（）

###时间格式化的输出
	now := time.Now()
	layout := "2006-01-02-150405"
	return fmt.Sprintf("%s/db/migrate/%s-%s.sql", path, now.Format(layout), name)



func ConfigPath(name string) string {
	fmt.Println(name)
	return "utest/" + name + ".json" //返回当前
}

//查询内容写入到文件中

func WriteDtFile(fileName, content string) {

	path := ConfigPath(fileName)

	fl, err := os.OpenFile(path, os.O_APPEND|os.O_CREATE, 0744)
	if err != nil {
		return
	}
	defer fl.Close()
	n, err := fl.Write([]byte(content + "\n"))
	if err == nil && n < len(content) {
		err = io.ErrShortWrite
	}
	fmt.Println(n)
}
