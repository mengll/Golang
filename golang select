1)在没有阻塞的情况下，select 会任选一个去去执行相关的操作。如果有阻塞的相关的操作,执行defalut的操作！
// fuxi
package main

import (
	"fmt"
)

func Adds(x, y int, ch chan int) {
	z := x + y
	ch <- z
	fmt.Println(z)
}
func main() {

	chs := make([]chan int, 10)
	fmt.Println("This isbingfa ")
	for i := 0; i < 10; i++ {
		chs[i] = make(chan int)
		go Adds(i, i, chs[i])
	}

	//遍历的等待，执行完成后的操作的控制的限制
	for _, ch := range chs {
		<-ch
	}

	//执行

	chanels := make([]chan bool, 4)
	for k := range chanels {
		chanels[k] = make(chan bool)
	}

	go func() {
		for kl := 0; kl < 5; kl++ {
			chanels[kl] <- true
		}
	}()

	for l := 0; l < 5; l++ {
		var x int
		select {
		case <-chanels[0]:
			x = 1
		case <-chanels[1]:
			x = 2
		case <-chanels[2]:
			x = 3
		case <-chanels[3]:
			x = 4
		default:
			x = 6
		}

		fmt.Printf("%d", x)
	}

	fmt.Println()

}


### 通道在关闭的时候 也会触发 select

package main

import (
	"fmt"
	"time"
)

func main() {
	start := time.Now()
	c := make(chan interface{})
	go func() {
		time.Sleep(time.Second * 5)
		close(c)
	}()
	fmt.Println("Blocking on read...")
	select {
	case cta, ok := <-c:
		fmt.Println(cta, ok) // nil false
		fmt.Printf("Unlock %v later.\n", time.Since(start))
	}
}

 select 会选择一个最先匹配到的数据执行， 循环的时候，有多个条件，其实是都会执行，就看谁先匹配到
 
 package main

import (
	"fmt"
	"time"
)

func main() {
	start := time.Now()
	c := make(chan interface{})
	go func() {
		time.Sleep(time.Second * 5)
		close(c)
	}()
	fmt.Println("Blocking on read...")

	// 最终还是会执行
	d := make(chan interface{})

	go func() {
		//time.Sleep(time.Second * 2)
		d <- 2
	}()

	// 还是会执行删除的操作
	e := make(chan interface{})
	go func() {
		//time.Sleep(time.Second * 2)
		e <- 12
	}()

	for i := 0; i < 3; i++ {
		select {
		case cta, ok := <-c:
			fmt.Println(cta, ok) // nil false
			fmt.Printf("Unlock %v later.\n", time.Since(start))
		case <-d:
			fmt.Println("This is d func") // 随机的

		case <-e:
			fmt.Println("This is e Func") // 随机的看 调度器的调度
		}
	}

}



