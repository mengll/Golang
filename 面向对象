1）面向对象开发
go 中没有类的概念可以使用 type的方式实现类
package main

import (
	"fmt"
)

type Game struct {
	Role  string
	Leval string
}

func (self *Game) show() {
	fmt.Println(self.Role, self.Leval)
}

func (self Game) showa() {
	fmt.Println("this is shoshow", self.Role)
	self.Role = "67"
}

func main() {

	gg := &Game{Role: "chicken", Leval: "23"}
	gg.show()
	gg.showa()
	gg.show()

}

//类的继承和对象的初始化


package main

import (
	"fmt"
)

type Base struct {
	Name string
}

func (self *Base) age() {
	fmt.Println(self.Name, "This is Base function")
}

//创建子类

type Son struct {
	Base
	Age string
}

func (self *Son) age() {
	fmt.Println("This is son function")
}

func main() {
	hh := Son{Age: "23", Base: Base{Name: "fj"}}
	hh.Base.age()
	hh.age()
	fmt.Println(hh.Name)
}


