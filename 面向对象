1）面向对象开发
go 中没有类的概念可以使用 type的方式实现类
package main

import (
	"fmt"
)

type Game struct {
	Role  string
	Leval string
}

func (self *Game) show() {
	fmt.Println(self.Role, self.Leval)
}

func (self Game) showa() {
	fmt.Println("this is shoshow", self.Role)
	self.Role = "67"
}

func main() {

	gg := &Game{Role: "chicken", Leval: "23"}
	gg.show()
	gg.showa()
	gg.show()

}

//类的继承和对象的初始化


package main

import (
	"fmt"
)

type Base struct {
	Name string
}

func (self *Base) age() {
	fmt.Println(self.Name, "This is Base function")
}

//创建子类

type Son struct {
	Base
	Age string
}

func (self *Son) age() {
	fmt.Println("This is son function")
}

func main() {
	hh := Son{Age: "23", Base: Base{Name: "fj"}}
	hh.Base.age()
	hh.age()
	fmt.Println(hh.Name)
}



//复习

package main

import (
	"fmt"
	"time"
)

//life time
func lifeTime() {
	select {
	case <-time.After(time.Second * 3):
		fmt.Println("This func ") //this is over the time limit
	}
}

//create the controller interface

type Ginterface interface {
	show()
	kill()
}

type Game struct {
	Name string
	Age  string
}

var KK Ginterface

func (slef *Game) show() {
	fmt.Println("This is show func ")
}

func (self *Game) kill() {
	fmt.Println("This is kill func ")
}

func (self *Game) pl() {
	fmt.Println("Thsi si funck")
}

func main() {

	jk := &Game{Name: "fj", Age: "23"}
	KK = jk

	jk.show()

	fmt.Println("This is Go func ")
	lifeTime()
}

//time Timeout function


//经典接口实现
//定义接口方法
type AdtClient interface {
	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	SetInfo(ctx context.Context, in *InfoReply, opts ...grpc.CallOption) (*Status, error)
	AdtReqSave(ctx context.Context, in *InfoReply, opts ...grpc.CallOption) (*Status, error)
	UpdateMongo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Status, error)
	GetAdtInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Status, error)
	GetAdtWhite(ctx context.Context, in *AdtWhrite, opts ...grpc.CallOption) (*AdtWhrite, error)
}

//定义数据类型
type adtClient struct {
	cc *grpc.ClientConn
}

//实例化一个对象
func NewAdtClient(cc *grpc.ClientConn) AdtClient {
	return &adtClient{cc}
}
