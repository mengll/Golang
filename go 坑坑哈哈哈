package main

import (
	"fmt"
)

func main() {
	aValue := new(int)
	*aValue = 1
	defer fmt.Println(*aValue) //go 中的defer 中的值，是最初给定的值不会吗随着当前地址的数据的变化而变化
	for i := 0; i < 100; i++ {
		*aValue++
	}

	fmt.Println(*aValue)
}



2） go range 传值的方式 ，range的内容只获取一次

	jk := []int{12, 334, 45}
	for k, v := range jk {
		jk = append(jk, v+1)
		fmt.Println(k, v)
	}
	
//0 12
//1 334
//2 45


3) go 中的select的值能随机 带来数据的不确定性
package main

import (
	"fmt"
	"runtime"
)

func main() {
	runtime.GOMAXPROCS(1)
	int_chan := make(chan int, 1)
	string_chan := make(chan string, 1)
	int_chan <- 1
	string_chan <- "222"
	select {
	case value := <-int_chan:
		fmt.Println(value)
	case value := <-string_chan:
		fmt.Println("string func a", value)
	}
}

func main() {
	runtime.GOMAXPROCS(1) / /及时是1 我的值也是随机的，你看着办
	two_chan := make(chan int ,1)
	int_chan := make(chan int, 1)

	go func(){
		two_chan <- 2
	}()

	go func() {
		int_chan <- 1
	}()

	//case 是被随机的但是 case的内容取值是有一定的顺序的

	for i:=0;i<2;i++{
		select {
		case value,ok := <-int_chan:
			fmt.Println(value,ok)

		case vl,ok := <-two_chan:
			println(ok,vl)
		}
	}
}

// default 中摆放的顺序不会影响 select 执行的顺序


//select is random  you dot't know of which one is first run

4)golang 中的赋值操作 都会拷贝一份 及深拷贝

	m := make(map[string]int)
	m["kl"] = 9
	m["pl"] = 10
	fmt.Println("map:", m)

	//delete one key

	delete(m, "kl")

	fmt.Println("map delete one key", m)
	c := m

	fmt.Println(&m == &c) //daochu dangqiande duixaing
	fmt.Println(&c)

	j := 1
	k := 1

	fmt.Println(&j == &k) //The value of data is not the

5）传值 和传递引用
	func inflate(numbers [9]int, factor int) {
		for i := range numbers {
			numbers[i] *= factor
		}
	}
	
	
	grades := [9]int{87, 55, 43, 71, 60, 43, 32, 19, 63}
	inflate(grades, 3)
	fmt.Println(grades)

	for ij := range grades {
		grades[ij] *= 2
	}
	fmt.Println(grades)
	echo //扩展数组在方法传递 的是复制了一份。  []int 是切片传递给方法的时候传递的是引用
	[87 55 43 71 60 43 32 19 63]
	[174 110 86 142 120 86 64 38 126]

6）获取当前的路径
	path, err := os.Getwd()
	
7)interface{}数据类型的差别
package main

type S struct {
}

func f(x interface{}) {
}

func g(x *interface{}) {
}

func main() {
	s := S{}
	p := &s
	f(s) //A correct
	g(s) //B incorrect 错误
	f(p) //C correct
	g(p) //D incorrect 错误 
	
	//interface{} 表示的是任意的类型的数据 *interface{} 表示的是指向一个结果的指针 
}

7) GOTO 与 break的区别
package main

func main() {
BH:
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			print(i, ",", j, " ")
			break BH  //使用break的时候会跳出，只执行一次 当使用goto的时候是跳转到某处开始执行，当使用goto的时候会不停的执行
		}
		println()
	}

}

8）字符串指针指向的数据内容
package main

func main() {
	s := "123"
	ps := &s
	b := []byte(*ps)
	pb := &b

	s += "4"
	println(*ps) // *ps 指向的内存地址的数据发生了改变,导致获取的数据的时候,发生改变 1234

	*ps += "5"
	b[1] = '0'

	println(*ps)
	println(string(*pb))
}
9) json 的解释符号
package main

import (
	"encoding/json"
	"fmt"
)

type Result struct {
	Status int `json:"status"` // 如果遗漏在解析json数据的时候无法正常的解析
}

func main() {
	var data = []byte(`{"status": 200}`)
	result := &Result{}

	if err := json.Unmarshal(data, result); err != nil {
		fmt.Println("error:", err)
		return
	}

	fmt.Printf("result=%+v", result)
}

