package main

import (
	"bytes"
	"crypto/hmac"
	"crypto/sha1"
	"encoding/base64"
	"encoding/binary"
	"fmt"
)

var I_key string = "ebcd1234efgh5678ebcd1234efgh5678" //原始值
var E_key string = "5678dcba1234abcd5678dcba1234abcd" //加密过的

func main() {

	fmt.Println("--->><<<<")
	p_price := Decprice("VH2SogAO-2ZUfZKiAA77ZlONOMFBLsR53TOlOg")
	fmt.Println(p_price)
	CreatSign("04d0d988f3634f3f80147dc09a5bfd42", "http://adx.toutiao.com/adxbuyer/api/v1.0/creatives/put?dspid=12345&creative_num=3")
}

//返回金额是零表示失败
func Decprice(base64price string) uint64 {
	defer func() uint64 {
		if err := recover(); err != nil {
			return 0
		}
		return 0
	}()
	Lstr := base64price

	for {
		if len(Lstr)%4 == 0 {
			break
		}
		Lstr += "="
	}
	base64.RawStdEncoding.DecodeString(Lstr)
	enc_price, er := base64.URLEncoding.DecodeString(Lstr)

	if er != nil || len(enc_price) < 28 {
		return 0
	}

	iv := enc_price[0:16]
	price := enc_price[16:24]
	sig := enc_price[24:28]

	//fmt.Println(string(kla))
	e_key := []byte(E_key)
	e_key_d := hmac.New(sha1.New, e_key)
	e_key_d.Write(iv)
	e_key_end := e_key_d.Sum(nil)

	la := make([]byte, 8)
	for i := 0; i < 8; i++ {
		la[i] = price[i] ^ e_key_end[i]
	}

	//验证当前的签名
	laa := BytesCombine(la, iv)
	e_keya := []byte(I_key)
	e_keya_d := hmac.New(sha1.New, e_keya)
	e_keya_d.Write(laa)
	e_keya_end := e_keya_d.Sum(nil)

	sign_k := e_keya_end[0:4]
	istrue := bytes.Compare(sign_k, sig) //返回的值是零表示相等

	if istrue == 0 {
		v := BytesToInt64(la)
		return uint64(v)
	}
	return 0
}

func BytesCombine(pBytes ...[]byte) []byte {
	len := len(pBytes)
	s := make([][]byte, len)
	for index := 0; index < len; index++ {
		s[index] = pBytes[index]
	}
	sep := []byte("")
	return bytes.Join(s, sep)
}

func BytesToInt64(buf []byte) int64 {
	return int64(binary.BigEndian.Uint64(buf))
}

func Int64ToBytes(i int64) []byte {
	var buf = make([]byte, 8)
	binary.BigEndian.PutUint64(buf, uint64(i))
	return buf
}

//生成签名
func CreatSign(key, url string) {
	e_keya := []byte(key)
	urls := []byte(url)
	e_keya_d := hmac.New(sha1.New, e_keya)
	e_keya_d.Write(urls)
	e_keya_end := e_keya_d.Sum(nil)
	return base64.StdEncoding.EncodeToString(e_keya_end)
}

//解析数据
