package main

import (
	"fmt"
	"sync"
	"time"
)

var timeout = make(chan bool, 1)

func gg() {
	time.Sleep(3 * time.Second)
	timeout <- true
}

var ch = make(chan int, 10)

//多核操作
func godo(isa int, chs chan int) {
	chs <- isa
}

const NUMS = 4

var lucj int = 8
var l sync.Mutex

func lock(num int) {
	l.Lock()
	lucj = num
	defer l.Unlock()
}

//创建结构化的数据类型

func main() {
	go func() {
		ch <- 2
	}()
	go gg()
	//阻塞等待，执行结果
	select {
	case <-ch:
		fmt.Println("This is run here! you can do that!")
		close(ch)
	case <-timeout:
		fmt.Println("Now this is run time out")
		close(timeout)
	}
	lk := make(chan int, 10)
	go func() {
		//实现4cpu
		fmt.Println("sdadas")
		for i := 0; i < NUMS; i++ {
			go godo(i, lk)
			go lock(i)
		}

	}()

	for i := 0; i < NUMS; i++ {
		go func() { fmt.Println(<-lk) }()
	}

	time.Sleep(3 * time.Second)

	// 使用数据同步锁的控制

}

//在使用管道的时候，最好设置相关的超时时间，不然会出现，阻塞的现象！导致程序，崩溃

//关闭管道使用的是close 关闭当前的通道

// 通道关闭后返回的是false  通道额关闭，只是不能继续向通道写数据通道内数据，通道内的数据依然存在

// 通到关闭之后，还是可以从通道中获取数据，只是获取的数据是 nil,通道关闭返回的是false

package main

import (
	"fmt"
)

func main() {
	c1 := make(chan interface{})
	close(c1)

	c2 := make(chan interface{})
	close(c2)

	var c1Count, c2Count int
	for i := 0; i < 1000; i++ {
		select {
		case k, v := <-c1:
			fmt.Println(k, v)
			c1Count++
		case k, v := <-c2:
			fmt.Println(k, v)
			c2Count++
		}
	}
	fmt.Printf("c1Count:%d c2Count:%d\n", c1Count, c2Count)
}




