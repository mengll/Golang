package main

import (
	"fmt"
)

func main() {
	aValue := new(int)
	defer fmt.Println(*aValue)
	for i := 0; i < 100; i++ {
		*aValue++
		fmt.Println(*aValue)
	}

	defer fmt.Println(*aValue)
}


go defer 里面的值是defer 在哪，里面的值就会从什么地方那个，获取当前的数据


1)defer中的坑
案例一 //返回的结果是1
func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}
案例2

func f() (r int) {
	t := 5
	defer func() {
		t = t + 5
	}()
	return t  // 返回值为5 当操作的值不是返回值得时候，defer中的数据不会影响 数据库中的操作
}

案例三 
func f() (r int) {
	defer func(r int) {
		r = r + 5
	}(r)
	
	return 1
}
