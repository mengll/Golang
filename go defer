package main

import (
	"fmt"
)

func main() {
	aValue := new(int)
	defer fmt.Println(*aValue)
	for i := 0; i < 100; i++ {
		*aValue++
		fmt.Println(*aValue)
	}

	defer fmt.Println(*aValue)
}


go defer 里面的值是defer 在哪，里面的值就会从什么地方那个，获取当前的数据


1)defer中的坑
案例一 //返回的结果是1
func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}
案例2

func f() (r int) {
	t := 5
	defer func() {
		t = t + 5
	}()
	return t  // 返回值为5 当操作的值不是返回值得时候，defer中的数据不会影响 数据库中的操作
}

案例三 
func f() (r int) {
	defer func(r int) {
		r = r + 5
	}(r)
	
	return 1
}

函数返回的过程是这样的：先给返回值赋值，然后调用defer表达式，最后才是返回到调用函数中。
defer表达式可能会在设置函数返回值之后，在返回到调用函数之前，修改返回值，使最终的函数返回值与你想象的不一致。
其实使用defer时，用一个简单的转换规则改写一下，就不会迷糊了。改写规则是将return语句拆成两句写，return xxx会被改
写成:
	返回值 = xxx
	调用defer函数
	空的return

func f() (result int) {
	result = 0 //return语句不是一条原子调用，return xxx其实是赋值＋ret指令

	func() { //defer被插入到return之前执行，也就是赋返回值和ret指令之间
		result++
		}()
		return
}

//案例2变形后
func f() (r int) {
	t := 5
	r = t //赋值指令
	func() { //defer被插入到赋值与返回之间执行，这个例子中返回值r没被修改过
	t = t + 5
	} 
	return //空的return指令
}

//案例三变形后
func f() (r int) {
	r = 1 //给返回值赋值
	func(r int) { //这里改的r是传值传进去的r，不会改变要返回的那个r值
		r = r + 5
	}(r)
	return //空的return
}


defer确实是在return之前调用的。但表现形式上却可能不像。本质原因是return xxx语句并不是一条原子指令，defer被插入到
了赋值 与 ret之间，因此可能有机会改变最终的返回值

案例四 defer的取值问题

type Car struct {
  model string
}
func (c Car) PrintModel() {
  fmt.Println(c.model)
}
func main() {
  c := Car{model: "DeLorean DMC-12"}
  defer c.PrintModel()
  c.model = "Chevrolet Impala"
}
//输出内容
//DeLorean DMC-12   defer




